## springBoot项目中同时存在application.properties和application.yml文件时
## 两个文件都有效，但是application.properties的优先级会比application.yml高
#
## Redis配置文件
## Redis服务器地址
#spring.redis.host=127.0.0.1
## Redis服务器连接端口
#spring.redis.port=6379
## Redis服务器连接密码（默认为空）
#spring.redis.password=Xingxing9725
## Redis数据库索引（默认为0）
#spring.redis.database=0
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.lettuce.pool.max-active=20
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.lettuce.pool.max-wait=5000
## 连接池中的最大空闲连接
#spring.redis.lettuce.pool.max-idle=20
## 连接池中的最小空闲连接
#spring.redis.lettuce.pool.min-idle=5
## 连接超时时间（毫秒）
#spring.redis.timeout=5000
#
#
## springboot异步线程配置
## 配置核心线程数
#async.executor.thread.core_pool_size=5
## 配置最大线程数
#async.executor.thread.max_pool_size=10
## 配置队列大小
#async.executor.thread.queue_capacity=100
## 设置线程活跃时间（秒）
#async.executor.thread.keep_alive_seconds=60
## 配置线程池中的线程的名称前缀
#async.executor.thread.name_prefix=async-service-
#
#
## quartz定时任务持久化配置
## 使用数据库存储
#spring.quartz.job-store-type=JDBC
## 相同 Scheduler 名字的节点，形成一个 Quartz 集群
#spring.quartz.scheduler-name=clusteredScheduler
## 应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
#spring.quartz.wait-for-jobs-to-complete-on-shutdown=true
## 延时1s启动
#spring.quartz.startup-delay=1s
## 启动时更新己存在的Job, 这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了。默认为false
#spring.quartz.overwrite-existing-jobs=true
## 设置自动启动, 默认为true
#spring.quartz.auto-startup=true
## 实例名称 可随意设置
#spring.quartz.properties.org.quartz.scheduler.instanceName=clusteredScheduler
## 自动生成实例ID
#spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
## 关闭更新
#spring.quartz.properties.org.quartz.scheduler.skipUpdateCheck=true
## JobStore配置 - 此处是存储在表中,适合集群环境 也可以配置为直接存在缓存中: org.quartz.simpl.RAMJobStore 适合单机环境
#spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
## 数据库驱动配置 - org.quartz.impl.jdbcstore.StdJDBCDelegate 适用于完全兼容JDBC的驱动
#spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
## 使用的数据源
#spring.quartz.properties.org.quartz.jobStore.dataSource=masterDataSource
## Quartz 表前缀
#spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_
## 设置为“true”以打开群集功能. 如果您有多个Quartz实例使用同一组数据库表, 则此属性必须设置为“true”, 否则您将遇到破坏
#spring.quartz.properties.org.quartz.jobStore.isClustered=true
## 设置此实例“检入”*与群集的其他实例的频率(以毫秒为单位). 影响检测失败实例的速度
#spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval=10000
#spring.quartz.properties.org.quartz.jobStore.useProperties=false
# 在给定的通行证中, 工作区将处理的最大错误次数触发. 一次处理很多(超过几十)可能导致数据库表被锁定得足够长, 以致可能会阻碍其他(未失败的)Triggers触发的性能.
#spring.quartz.properties.org.quartz.jobStore.maxMisfiresToHandleAtATime=1
## 在被认为失效之前, 调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数. 默认值(如果在配置中未输入此属性)为60000(60秒)
#spring.quartz.properties.org.quartz.jobStore.misfireThreshold=12000
## 值“true”表示Quartz(使用JobStoreTX或CMT)在JDBC连接上调用setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE). 这可以有助于防止在高负载下的某些数据库的锁定超时以及“持久”事务.
#spring.quartz.properties.org.quartz.jobStore.txIsolationLevelSerializable=true
## 线程池配置
#spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
## 线程数
#spring.quartz.properties.org.quartz.threadPool.threadCount=20
## 优先级 1 - 10 默认 5
#spring.quartz.properties.org.quartz.threadPool.threadPriority=5
#spring.quartz.properties.org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
#
#
#
#
## 1、单机模式配置
## redisson服务器地址
#redisson.address=redis://127.0.0.1:6379
## redisson服务器连接密码（默认为空）
#redisson.password=Xingxing9725
## redisson连接超时时间（毫秒）
#redisson.timeout=5000
## 2、哨兵模式配置
##redisson.master-name=mymaster
##redisson.password=123456
##redisson.sentinel-addresses=127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381